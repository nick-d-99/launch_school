In other practice problems, we have looked at how the scope of variables affects the modification of one 
"layer" when they are passed to another.

To drive home the salient aspects of variable scope and modification of one scope by another, consider 
the following similar sets of code.

What will be printed by each of these code groups?

A)

def mess_with_vars(one, two, three)
  one = two
  two = three
  three = one
end

one = "one"
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}"
puts "two is: #{two}"
puts "three is: #{three}"

==> one is: one
==> two is: two
==> three is: three

B)

def mess_with_vars(one, two, three)
  one = "two"
  two = "three"
  three = "one"
end

one = "one"
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}"
puts "two is: #{two}"
puts "three is: #{three}"

==> one is: one
==> two is: two
==> three is: three

C)

def mess_with_vars(one, two, three)
  one.gsub!("one","two")
  two.gsub!("two","three")
  three.gsub!("three","one")
end

one = "one"
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}"
puts "two is: #{two}"
puts "three is: #{three}"

==> one is: two
==> two is: three
==> three is: one

used this great article to get my answers: https://www.infoq.com/articles/ruby-parameter-passing/

my understanding is that ruby passes the same object id when calling a method

this means any modifications to the parameter passed are modifications made to 
the original object

once the paramter is reassigned, it is now essentially a copy, and the original stays unchanged

this means the line "one = two" is not impacting the original object because this is reassignment so
a copy is made, that copy is manipulated and the original "one" object is unchanged

the above process is what happens for options a and b

with option c it changes however
with option c there is no reassignment so whatever is happening to the parameter variables is happening
to the original object and therefore changing the varaible outside the methods scope